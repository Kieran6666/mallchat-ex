package com.kieran.mallchat.common.user.service.impl;import com.kieran.mallchat.common.common.constant.RedisKey;import com.kieran.mallchat.common.common.utils.JwtUtil;import com.kieran.mallchat.common.common.utils.RedisUtil;import com.kieran.mallchat.common.user.service.LoginService;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.util.Objects;import java.util.concurrent.TimeUnit;@Servicepublic class LoginServiceImpl implements LoginService {    private static final int TOKEN_EXPIRE_DAYS = 3;    @Resource    private JwtUtil jwtUtil;    @Override    public String login(Long uid) {        String token = jwtUtil.createToken(uid);        RedisUtil.set(getUserTokenKey(uid), token, TOKEN_EXPIRE_DAYS, TimeUnit.DAYS);        return token;    }    // 异步续期    @Override    @Async // 这里会调用线程池重写的executor，异步执行登陆续期    public void renewalTokenIfNecessary(String token) {        Long uid = getValidUid(token);        if (Objects.isNull(uid)) {            return;        }        String userTokenKey = getUserTokenKey(uid);        Long expireDays = RedisUtil.getExpire(userTokenKey, TimeUnit.DAYS);        if (expireDays == -2) { // 表示已过期            return;        }        // 续期        if (expireDays < 1) {            RedisUtil.expire(userTokenKey, TOKEN_EXPIRE_DAYS, TimeUnit.DAYS);        }    }    @Override    public Long getValidUid(String token) {        Long uid = jwtUtil.getUidOrNull(token);        if (Objects.isNull(uid)) {            return null;        } else {            String oldToken = RedisUtil.getStr(getUserTokenKey(uid));            return Objects.equals(token, oldToken) ? uid : null;        }    }    private String getUserTokenKey(Long uid) {        return RedisKey.getKey(RedisKey.USER_TOKEN_STRING, uid);    }}